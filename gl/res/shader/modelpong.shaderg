#shader vertex
#version 430 core

layout(location = 0) in vec3 position;
layout(location = 1) in vec2 texCoord;
layout (location = 2) in vec3 normal;

uniform mat4 projection;
uniform mat4 view;
uniform mat4 model;
out vec2 v_TexCoord;
out vec3 Normal;
out vec3 FragPos;
void main()
{
    gl_Position = projection * view * model * vec4(position, 1.0f);
     v_TexCoord = texCoord;
    FragPos = vec3(model * vec4(position, 1.0f));
    Normal = vec3(model * vec4(normal, 0.0f));//缩放有问题

    //FragPos = vec3(view * model * vec4(position, 1.0f));
    //Normal = vec3(view * model * vec4(normal, 0.0f));//缩放有问题
};


#shader fragment
#version 430 core

in vec2 v_TexCoord;
in vec3 Normal;
in vec3 FragPos;
uniform vec3 lightPos;
uniform vec3 lightColor;
uniform vec3 viewPos;
struct Material
{
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
};
uniform Material material;
out vec4 color;


uniform sampler2D u_Texture;

void main()
{
    
    vec4 texColor1 = texture(u_Texture, v_TexCoord);

    //float ambientStrength = 0.1f;
    vec3 ambient = material.ambient * lightColor;

    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = material.diffuse * diff * lightColor;

    //float specularStrength = 0.5f;
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = material.specular * spec * lightColor;

 

    //vec3 result = (ambient + diffuse + specular) * texColor1.xyz;
     vec3 result = (ambient + diffuse + specular) * (1.0f,1.0f,1.0f);
     //vec3 result = texColor1.xyz;
    color = vec4(result, 1.0f);
    


};